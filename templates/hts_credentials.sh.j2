# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#
# For code blocks and examples (cf groff's Ultrix-specific man macros)

# Get AWS credentials for S3 service and write to file.
instance='http://169.254.169.254'
tok_url="$instance/latest/api/token"
creds_url="$instance/latest/meta-data/iam/security-credentials"
tok_hdr="X-aws-ec2-metadata-token"

AWS_SHARED_CREDENTIALS_FILE=${AWS_SHARED_CREDENTIALS_FILE:=~/.aws/credentials}

# JQ script to substitute key names then convert to INI format.
read -r -d '' JQ_SCRIPT <<'EOF'
{
aws_access_key_id: .AccessKeyId,
aws_secret_access_key: .SecretAccessKey,
aws_session_token: .Token,
expiry_time: .Expiration
} | to_entries | map([.key, .value] | join("=")) |
.[]
EOF

ERR_CNT=0
ERR_LIMIT=5

while true; do
    token=`curl --no-progress-meter -X PUT -H "X-aws-ec2-metadata-token-ttl-seconds: 10" "$tok_url"`
    role=`curl --no-progress-meter -H "X-aws-ec2-metadata-token: $token" "$creds_url/"`
    expires='now'

    if [ $ERR_CNT -gt $ERR_LIMIT ]; then
      echo "Errored $ERR_CNT times. Exiting." 1>&2
      exit 1
    fi

    echo "[default]" > "${AWS_SHARED_CREDENTIALS_FILE}.new"

    curl --no-progress-meter -H "$tok_hdr: $token" "$creds_url/$role" |\
        jq --raw-output "${JQ_SCRIPT}" >> "${AWS_SHARED_CREDENTIALS_FILE}.new"

    if [ $? -ne 0 ]; then
      echo "Error retrieving credentials" 1>&2
      ERR_CNT=$((ERR_CNT+1))
      sleep 60
      continue
    fi

    mv -f "${AWS_SHARED_CREDENTIALS_FILE}.new" "${AWS_SHARED_CREDENTIALS_FILE}"

    if test $? -ne 0; then
      echo "Error moving credentials" 1>&2
      ERR_CNT=$((ERR_CNT+1))
      sleep 60
      continue
    fi

    expires=`grep expiry_time ${AWS_SHARED_CREDENTIALS_FILE} | cut -d '=' -f 2-`
    expiry=`date -d "$expires - 3 minutes" '+%s'`
    now=`date '+%s'`

    if [ "$expiry" -gt "$now" ]; then
        sleep $((($expiry - $now) / 2))
    fi
    sleep 30
done
